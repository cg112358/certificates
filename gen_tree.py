#!/usr/bin/env python3
"""
Update README.md 'Repository structure' section with a Markdown tree.

Usage:
  python gen_tree.py
  python gen_tree.py --ascii        # use ASCII connectors (+-- instead of ├──)
  python gen_tree.py --root .       # pick another root
  python gen_tree.py --ignore out --ignore dist
"""

import os, io, sys, argparse
from typing import List, Set

BEGIN = "<!-- BEGIN REPO TREE -->"
END   = "<!-- END REPO TREE -->"
DEFAULT_README = "README.md"
DEFAULT_IGNORE: Set[str] = {
    ".git", ".venv", "__pycache__", "node_modules",
    ".DS_Store", ".idea", ".vscode"
}

def list_entries(path: str, ignore: Set[str]) -> List[str]:
    return sorted(
        [e for e in os.listdir(path) if e not in ignore],
        key=lambda name: (not os.path.isdir(os.path.join(path, name)), name.lower()),
    )

def render_tree(root: str, ignore: Set[str], ascii_mode: bool) -> str:
    VERT, BRANCH, LAST = ("|   ", "+-- ", "\\-- ") if ascii_mode else ("│   ", "├── ", "└── ")
    lines: List[str] = ["```text"]

    def walk(path: str, prefix: str = ""):
        entries = list_entries(path, ignore)
        for i, name in enumerate(entries):
            p = os.path.join(path, name)
            connector = LAST if i == len(entries) - 1 else BRANCH
            lines.append(f"{prefix}{connector}{name}")
            if os.path.isdir(p):
                extension = "    " if i == len(entries) - 1 else VERT
                walk(p, prefix + extension)

    walk(root)
    lines.append("```")
    return "\n".join(lines) + "\n"

def replace_block(readme_text: str, new_block: str) -> str:
    if BEGIN not in readme_text or END not in readme_text:
        raise SystemExit("Markers not found in README. Please add BEGIN/END markers.")
    before, rest = readme_text.split(BEGIN, 1)
    _, after = rest.split(END, 1)

    # Ensure fences are correct even if someone messed them up
    new_section = BEGIN + "\n<!-- autogenerated; do not edit -->\n" + new_block + END
    return before + new_section + after

def main():
    ap = argparse.ArgumentParser(description="Update README with repo tree.")
    ap.add_argument("--readme", default=DEFAULT_README)
    ap.add_argument("--root", default=".")
    ap.add_argument("--ascii", action="store_true")
    ap.add_argument("--ignore", action="append", default=[])
    args = ap.parse_args()

    ignore = DEFAULT_IGNORE | set(args.ignore)

    tree_md = render_tree(args.root, ignore, args.ascii)

    with io.open(args.readme, "r", encoding="utf-8") as f:
        readme_text = f.read()

    updated = replace_block(readme_text, tree_md)

    if updated != readme_text:
        with io.open(args.readme, "w", encoding="utf-8") as f:
            f.write(updated)
        print(f"✅ Updated {args.readme}")
    else:
        print("ℹ️ README already up to date.")

if __name__ == "__main__":
    sys.stdout.reconfigure(encoding="utf-8")  # Windows-safe printing
    main()
